{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allAsteroids","windowWidth","window","innerWidth","windowHeight","innerHeight","allAsteroidRefs","asteroidLotties","_this2","initializeBg","i","push","insertNewAsteroid","setState","initializeAllAsteroidLotties","gameLoop","requestAnimationFrame","runGameLoop","bg","lottie","loadAnimation","container","continerRef","animType","autoplay","loop","rendererSettings","preserveAspectRatio","animationData","require","_this3","console","log","map","astroidRef","astroidRefIndex","prerender","cancelAnimationFrame","leftMargin","Math","random","xRandomness","style","top","left","height","width","transform","center","asteroidDimension","xSpeed","ySpeed","radius","isAlive","_this4","length","asteroid","asteroidIndex","objectSpread","concat","atan","_this5","react_default","a","createElement","className","ref","item","index","key","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea1e252e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport lottie from \"lottie-web\";\nconst asteroidDimension = 35;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allAsteroids: []\n    };\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight;\n    this.allAsteroidRefs = [];\n    this.asteroidLotties = [];\n  }\n  componentDidMount() {\n    // this.initializeGameLoop();\n    this.initializeBg();\n    let i = 10;\n    while (i > 0) {\n      this.state.allAsteroids.push(this.insertNewAsteroid());\n      i--;\n    }\n    this.setState(\n      {\n        allAsteroids: this.state.allAsteroids\n      },\n      () => {\n        this.initializeAllAsteroidLotties();\n        this.gameLoop = window.requestAnimationFrame(() => this.runGameLoop());\n      }\n    );\n  }\n  initializeBg() {\n    this.bg = lottie.loadAnimation({\n      container: this.continerRef,\n      animType: \"svg\",\n      autoplay: true,\n      loop: true,\n      rendererSettings: {\n        preserveAspectRatio: \"none\"\n      },\n      animationData: require(`./assets/spaceBg.json`) // the path to the animation json\n    });\n  }\n  initializeAllAsteroidLotties() {\n    console.log(\"initializeAllAsteroidLotties\");\n    this.allAsteroidRefs.map((astroidRef, astroidRefIndex) => {\n      this.asteroidLotties[astroidRefIndex] = lottie.loadAnimation({\n        container: astroidRef,\n        animType: \"svg\",\n        prerender: false,\n        autoplay: true,\n        animationData: require(`./assets/molten.json`) // the path to the animation json\n      });\n      // this.asteroidLotties[astroidRefIndex].playSegments([0, 32], true);\n      this.asteroidLotties[astroidRefIndex].loop = true;\n    });\n  }\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.gameLoop);\n  }\n  insertNewAsteroid() {\n    const leftMargin = Math.random() * (this.windowWidth - 70) + 35;\n    const xRandomness = Math.random() > 0.5 ? 1 : -1;\n    return {\n      style: {\n        top: 0,\n        left: leftMargin,\n        height: asteroidDimension,\n        width: asteroidDimension,\n        transform: \"rotate(0deg)\"\n      },\n      center: [leftMargin + asteroidDimension / 2, asteroidDimension / 2],\n      xSpeed: (0.7 + Math.random() * 0.4) * xRandomness,\n      ySpeed: 0.7 + Math.random() * 0.4,\n      radius: asteroidDimension / 2,\n      isAlive: true\n    };\n  }\n  runGameLoop() {\n    if (this.state.allAsteroids.length) {\n      // console.log(\"looping\");\n      this.setState(\n        {\n          allAsteroids: this.state.allAsteroids\n        },\n        () => {\n          // detect collisions here and update asteroids\n          this.state.allAsteroids.map((asteroid, asteroidIndex) => {\n            // left and right wall collision\n            if (\n              asteroid.center[0] < asteroid.radius ||\n              asteroid.center[0] > this.windowWidth - asteroid.radius\n            ) {\n              asteroid.xSpeed = -asteroid.xSpeed;\n            } else if (asteroid.center[1] > this.windowHeight) {\n              this.state.allAsteroids[asteroidIndex] = this.insertNewAsteroid();\n            }\n            asteroid.style = {\n              ...asteroid.style,\n              top: asteroid.style.top + asteroid.ySpeed,\n              left: asteroid.style.left + asteroid.xSpeed,\n              transform: `rotate(${-Math.atan(\n                asteroid.ySpeed / asteroid.xSpeed\n              )}rad)`\n            };\n            // console.log(Math.atan(asteroid.ySpeed / asteroid.xSpeed))\n            asteroid.center = [\n              asteroid.center[0] + asteroid.xSpeed,\n              asteroid.center[1] + asteroid.ySpeed\n            ];\n          });\n        }\n      );\n    }\n    this.gameLoop = window.requestAnimationFrame(() => this.runGameLoop());\n  }\n  render() {\n    return (\n      <div className=\"mainContainer\">\n        <div ref={ref => (this.continerRef = ref)} className=\"bg\" />\n        {this.state.allAsteroids.map((item, index) => {\n          return (\n            <div\n              ref={ref => (this.allAsteroidRefs[index] = ref)}\n              className=\"asteroid\"\n              key={index}\n              style={item.style}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}