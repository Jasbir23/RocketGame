{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["obstacleStep","rocketDimension","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","windowWidth","window","innerWidth","windowHeight","innerHeight","state","obstacleBoxes","rocketHorFactor","gameOver","boxRefs","runGameLoop","bind","assertThisInitialized","allObstacleLotties","initializeRocket","startGame","bg","lottie","loadAnimation","container","continerRef","animType","autoplay","loop","rendererSettings","preserveAspectRatio","animationData","require","rocket","rocketRef","_this2","leftMargin","Math","random","boxArrayLength","length","push","style","left","height","width","key","setState","initializeObstacleLottie","_this3","gameLoop","setInterval","play","obstacleIndex","randomFactor","floor","removalIndexesArray","_this4","map","removalIndex","destroy","splice","clearInterval","stop","a","b","right","top","bottom","_this5","removalIndexes","item","index","getBoundingClientRect","y","isColliding","offsetTop","offsetLeft","x","stopGame","removeLotties","insertNewObstacle","leftMoving","rightMoving","_this6","react_default","createElement","className","ref","concat","onTouchStart","e","onTouchEnd","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e064de65.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport lottie from \"lottie-web\";\n\nlet obstacleStep = 0;\nconst rocketHorSpeed = 6;\nconst obstacleAppearInterval = 150;\nconst obstacleDimension = 100;\nconst collisionErrorMargin = 10;\nconst rocketDimension = {\n  width: 50,\n  height: 100\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight;\n    this.state = {\n      obstacleBoxes: [],\n      rocketHorFactor: this.windowWidth / 2 - 25,\n      gameOver: false\n    };\n    this.boxRefs = [];\n    this.runGameLoop = this.runGameLoop.bind(this);\n    this.allObstacleLotties = {};\n  }\n  componentDidMount() {\n    // this.initializeBg();\n    this.initializeRocket();\n    this.startGame();\n  }\n  initializeBg() {\n    this.bg = lottie.loadAnimation({\n      container: this.continerRef,\n      animType: \"svg\",\n      autoplay: false,\n      loop: true,\n      rendererSettings: {\n        preserveAspectRatio: \"none\"\n      },\n      animationData: require(`./assets/spaceBg.json`) // the path to the animation json\n    });\n  }\n  initializeRocket() {\n    this.rocket = lottie.loadAnimation({\n      container: this.rocketRef,\n      animType: \"svg\",\n      autoplay: true,\n      loop: true,\n      animationData: require(`./assets/rocket.json`) // the path to the animation json\n    });\n  }\n  insertNewObstacle() {\n    const leftMargin = Math.random() * (this.windowWidth - 100);\n    const boxArrayLength = this.state.obstacleBoxes.length;\n    this.state.obstacleBoxes.push({\n      style: {\n        left: leftMargin,\n        height: obstacleDimension,\n        width: obstacleDimension\n      },\n      key: Math.random()\n    });\n    this.setState(\n      {\n        obstacleBoxes: this.state.obstacleBoxes\n      },\n      () => {\n        this.initializeObstacleLottie(\n          this.boxRefs[boxArrayLength],\n          boxArrayLength\n        );\n      }\n    );\n  }\n  startGame() {\n    this.setState(\n      {\n        obstacleBoxes: [],\n        gameOver: false\n      },\n      () => {\n        this.gameLoop = setInterval(this.runGameLoop, 15);\n      }\n    );\n    this.rocket.play();\n  }\n  initializeObstacleLottie(container, obstacleIndex) {\n    const randomFactor = Math.floor(Math.random() * 10);\n    const key = this.state.obstacleBoxes[obstacleIndex].key;\n    this.allObstacleLotties[key] = lottie.loadAnimation({\n      container: container,\n      animType: \"svg\",\n      autoplay: true,\n      loop: true,\n      rendererSettings: {\n        preserveAspectRatio: \"none\"\n      },\n      animationData:\n        randomFactor > 5\n          ? require(`./assets/grad.json`)\n          : require(`./assets/molten.json`)\n    });\n  }\n  removeLotties(removalIndexesArray) {\n    removalIndexesArray.map(removalIndex => {\n      if (\n        this.state.obstacleBoxes[removalIndex] &&\n        this.allObstacleLotties[this.state.obstacleBoxes[removalIndex].key]\n      ) {\n        this.allObstacleLotties[\n          this.state.obstacleBoxes[removalIndex].key\n        ].destroy();\n        delete this.allObstacleLotties[\n          this.state.obstacleBoxes[removalIndex].key\n        ];\n      }\n      this.state.obstacleBoxes.splice(removalIndex, 1);\n      this.setState({\n        obstacleBoxes: this.state.obstacleBoxes\n      });\n    });\n  }\n  stopGame() {\n    clearInterval(this.gameLoop);\n    this.setState({\n      gameOver: true\n    });\n    this.rocket.stop();\n  }\n  isColliding(a, b) {\n    return (\n      a.left <= b.right &&\n      b.left <= a.right &&\n      a.top <= b.bottom &&\n      b.top <= a.bottom\n    );\n  }\n  runGameLoop() {\n    obstacleStep++;\n    let removalIndexes = [];\n    this.boxRefs.map((item, index) => {\n      if (item) {\n        // detect collision\n        if (item.getBoundingClientRect().y > this.windowHeight - 320) {\n          // it is in the colliding zone, detect collision\n          this.isColliding(\n            {\n              top: this.rocketRef.offsetTop + collisionErrorMargin,\n              left: this.rocketRef.offsetLeft + collisionErrorMargin,\n              right:\n                this.rocketRef.offsetLeft +\n                rocketDimension.width -\n                collisionErrorMargin,\n              bottom:\n                this.rocketRef.offsetTop +\n                rocketDimension.height -\n                collisionErrorMargin\n            },\n            {\n              top: item.getBoundingClientRect().y + collisionErrorMargin,\n              left: item.getBoundingClientRect().x + collisionErrorMargin,\n              right:\n                item.getBoundingClientRect().x +\n                obstacleDimension -\n                collisionErrorMargin,\n              bottom:\n                item.getBoundingClientRect().y +\n                obstacleDimension -\n                collisionErrorMargin\n            }\n          ) && this.stopGame();\n        }\n        // remove moved out boxes\n        if (item.getBoundingClientRect().y >= this.windowHeight) {\n          removalIndexes.push(index);\n        }\n      }\n    });\n    // removal logic\n    removalIndexes.length && this.removeLotties(removalIndexes);\n    // new insertion logic\n    if (obstacleStep === obstacleAppearInterval) {\n      this.insertNewObstacle();\n      obstacleStep = 0;\n    }\n    // control rocket logic\n    if (this.state.leftMoving) {\n      this.state.rocketHorFactor > rocketHorSpeed &&\n        this.setState({\n          rocketHorFactor: this.state.rocketHorFactor - rocketHorSpeed\n        });\n    }\n    if (this.state.rightMoving) {\n      this.state.rocketHorFactor < this.windowWidth - 50 - rocketHorSpeed &&\n        this.setState({\n          rocketHorFactor: this.state.rocketHorFactor + rocketHorSpeed\n        });\n    }\n  }\n  render() {\n    return (\n      <div className=\"mainContainer\">\n        <div ref={ref => (this.continerRef = ref)} className=\"bg\" />\n        {this.state.obstacleBoxes.map((item, index) => {\n          return (\n            <div\n              key={item.key}\n              ref={ref => (this.boxRefs[index] = ref)}\n              className=\"box\"\n              style={item.style}\n            />\n          );\n        })}\n        <div\n          ref={ref => (this.rocketRef = ref)}\n          className={`rocketContainer ${\n            this.state.leftMoving ? \"tiltLeft\" : \"\"\n          } ${this.state.rightMoving ? \"tiltRight\" : \"\"}`}\n          style={{ left: this.state.rocketHorFactor }}\n        />\n        <span\n          onTouchStart={e => this.setState({ leftMoving: true })}\n          onTouchEnd={e => this.setState({ leftMoving: false })}\n          className=\"leftBut button\"\n        />\n        <span\n          className=\"rightBut button\"\n          onTouchStart={e => this.setState({ rightMoving: true })}\n          onTouchEnd={e => this.setState({ rightMoving: false })}\n        />\n        <div className={`gameOverlay ${this.state.gameOver ? \"visible\" : \"\"}`}>\n          GAME OVER\n          <span onClick={() => this.startGame()}>RETRY</span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}